from typing import Protocol, Callable, Mapping, Any

# ... existing code ...

class BrokerPublisher(Protocol):
    def declare_exchange_and_queue(self, exchange: str, queue: str, routing_key: str) -> None: ...
    def declare_retry_infrastructure(self, exchange: str, queue: str) -> None: ...
    def publish(self, exchange: str, routing_key: str, body: bytes, headers: Mapping[str, str] = {}) -> None: ...
    def publish_to_retry(self, exchange: str, queue: str, body: bytes, headers: Mapping[str, str] = {}) -> None: ...
    def publish_to_dlq(self, exchange: str, queue: str, body: bytes, headers: Mapping[str, str] = {}) -> None: ...

class BrokerConsumer(Protocol):
    def consume(self, queue: str, on_message: Callable[[bytes, Mapping[str, str]], None], prefetch: int = 1) -> None: ...
    def consume_from_dlq(self, exchange: str, queue: str, job_id: str = None, max_messages: int = 1) -> list: ...
    def get_dlq_message_count(self, exchange: str, queue: str) -> int: ...
    def peek_dlq_messages(self, exchange: str, queue: str, limit: int = 10) -> list: ...

# ... existing code ...

class ResultBackend(Protocol):
    def set_fields(self, job_id: str, mapping: Mapping[str, Any], ttl_seconds: int | None = None) -> None: ...
    def get_all(self, job_id: str) -> Mapping[str, Any] | None: ...

