from typing import Protocol, Callable, Mapping, Any

class BrokerPublisher(Protocol):
    def declare_exchange_and_queue(self, exchange: str, queue: str, routing_key: str) -> None: ...
    def publish(self, exchange: str, routing_key: str, body: bytes, headers: Mapping[str, str] = {}) -> None: ...

class BrokerConsumer(Protocol):
    def consume(self, queue: str, on_message: Callable[[bytes, Mapping[str, str]], None], prefetch: int = 1) -> None: ...

class ResultBackend(Protocol):
    def set_fields(self, job_id: str, mapping: Mapping[str, Any], ttl_seconds: int | None = None) -> None: ...
    def get_all(self, job_id: str) -> Mapping[str, Any] | None: ...
